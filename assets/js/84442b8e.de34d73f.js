"use strict";(self.webpackChunkcharba=self.webpackChunkcharba||[]).push([[9852],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return h}});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=a.createContext({}),c=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},s=function(t){var e=c(t.components);return a.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,p=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),g=c(n),h=o,u=g["".concat(p,".").concat(h)]||g[h]||m[h]||r;return n?a.createElement(u,l(l({ref:e},s),{},{components:n})):a.createElement(u,l({ref:e},s))}));function h(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,l=new Array(r);l[0]=g;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},79789:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return m},default:function(){return h}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),l=n(44996),i=["components"],p={id:"Zoom",title:"Zoom plugin",hide_title:!0,sidebar_label:"Zoom"},c=void 0,s={unversionedId:"Zoom",id:"version-3.3/Zoom",title:"Zoom plugin",description:"Zoom plugin",source:"@site/versioned_docs/version-3.3/Zoom.md",sourceDirName:".",slug:"/Zoom",permalink:"/Charba-Wiki/docs/3.3/Zoom",tags:[],version:"3.3",frontMatter:{id:"Zoom",title:"Zoom plugin",hide_title:!0,sidebar_label:"Zoom"},sidebar:"version-3.3/docs",previous:{title:"Labels",permalink:"/Charba-Wiki/docs/3.3/Labels"},next:{title:"Annotation",permalink:"/Charba-Wiki/docs/3.3/Annotation"}},m=[{value:"Zoom plugin",id:"zoom-plugin",children:[],level:2},{value:"Activation",id:"activation",children:[],level:2},{value:"Configuration",id:"configuration",children:[],level:2},{value:"PAN element",id:"pan-element",children:[{value:"Mode Pan callback",id:"mode-pan-callback",children:[],level:3},{value:"onProgress Pan callback",id:"onprogress-pan-callback",children:[],level:3},{value:"onComplete Pan callback",id:"oncomplete-pan-callback",children:[],level:3}],level:2},{value:"ZOOM element",id:"zoom-element",children:[{value:"Dragging",id:"dragging",children:[],level:3},{value:"Mode Zoom callback",id:"mode-zoom-callback",children:[],level:3},{value:"onProgress Zoom callback",id:"onprogress-zoom-callback",children:[],level:3},{value:"onComplete Zoom callback",id:"oncomplete-zoom-callback",children:[],level:3}],level:2},{value:"Range",id:"range",children:[],level:2},{value:"Resetting zooming",id:"resetting-zooming",children:[],level:2}],g={toc:m};function h(t){var e=t.components,n=(0,o.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"zoom-plugin"},"Zoom plugin"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Charba")," provides out of the box the feature to enable ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chartjs/chartjs-plugin-zoom"},"Zoom")," which is a light weight plugin to zoom and pan a chart."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Charba")," is injecting the ",(0,r.kt)("inlineCode",{parentName:"p"},"chartjs-plugin-zoom.min.js"),", the released version ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chartjs/chartjs-plugin-zoom/releases/tag/v0.7.5"},"0.7.5"),"."),(0,r.kt)("p",null,"The plugin is providing 2 main actions to apply on a chart:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"panning"),", which refers to the horizontal or vertical scrolling of a chart wider than the display, can be done via the mouse or with a finger"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"zooming"),", which maintains focus when the chart size changes, is done via the mouse wheel or via a pinch gesture")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/hammerjs/hammer.js"},"Hammer.JS")," javaScript library is used for gesture recognition."),(0,r.kt)("img",{src:(0,l.Z)("/img/zoom.gif")}),(0,r.kt)("h2",{id:"activation"},"Activation"),(0,r.kt)("p",null,"The zoom plugin is injected directly into document."),(0,r.kt)("p",null,"The plugin ID is a constant everywhere available, ",(0,r.kt)("inlineCode",{parentName:"p"},"ZoomPlugin.ID"),", in ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin")," entry point."),(0,r.kt)("p",null,"This plugin registers itself globally, meaning that once injected, all charts will display labels. In case you want it enabled only for a few charts, you can enable it as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// enabling the plugin without any parameter\n// the plugin is NOT registered to all charts\n// --------------------------------------\nZoomPlugin.enable();\n\n// --------------------------------------\n// enabling the plugin with `true` parameter\n// the plugin is registered to all charts\n// --------------------------------------\nZoomPlugin.enable(true);\n\n// --------------------------------------\n// enabling the plugin with `true` parameter\n// the plugin is registered to all charts and\n// another `true` parameter to inject the HammerJS\n// --------------------------------------\nZoomPlugin.enable(true, true);\n")),(0,r.kt)("p",null,"With last sample, you can decide if you want to inject ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hammerjs/hammer.js"},"Hammer.JS")," (default), passing ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". This could be helpful when you have another library which is using and injecting Hammer.JS."),(0,r.kt)("p",null,"To activate the plugin in a specific chart, it's enough to provide the configuration options (see ",(0,r.kt)("a",{parentName:"p",href:"Zoom#configuration"},"below"),") or enabling it by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// enabling the plugin to a chart instance \n// by an options\n// --------------------------------------\nchart.getOptions().getPlugins().setOptions(ZoomPlugin.ID, options);\n\n// --------------------------------------\n// Another way to store the plugin options\n// enabling the plugin to a chart instance \n// --------------------------------------\nchart.getOptions().getPlugins().setOptions(options);\n\n// --------------------------------------\n// enabling the plugin to a chart instance \n// by a boolean using default\n// --------------------------------------\nchart.getOptions().getPlugins().setEnabled(ZoomPlugin.ID, true);\n")),(0,r.kt)("p",null,"If you need to read the plugin options, there is the specific factory, ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/ZoomOptionsFactory.html"},"ZoomOptionsFactory")," as static reference inside the ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin")," entry point which can be used to retrieve the options from chart as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// reads the options from chart\n// --------------------------------------\nZoomOptions options;\n\nif (chart.getOptions().getPlugins().hasOptions(ZoomPlugin.ID)){\n   // --------------------------------------\n   // retrieve the plugin options by plugin ID\n   // --------------------------------------\n   options = chart.getOptions().getPlugins().getOptions(ZoomPlugin.ID, ZoomPlugin.FACTORY);\n   // --------------------------------------\n   // or retrieve the plugin options without plugin ID\n   // --------------------------------------\n   options = chart.getOptions().getPlugins().getOptions(ZoomPlugin.FACTORY);\n}\n")),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"The plugin options can be changed at 2 different levels and are evaluated with the following priority:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"per chart by ",(0,r.kt)("inlineCode",{parentName:"li"},"chart.getOptions().getPlugins().setOptions")," method"),(0,r.kt)("li",{parentName:"ul"},"per chart type by ",(0,r.kt)("inlineCode",{parentName:"li"},"Defaults.get().getOptions([chartType]).getPlugins().setOptions")," method"),(0,r.kt)("li",{parentName:"ul"},"or globally by ",(0,r.kt)("inlineCode",{parentName:"li"},"Defaults.get().getGlobal().getPlugins().setOptions")," method")),(0,r.kt)("p",null,"The configuration class ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/ZoomOptions.html"},"ZoomOptions")," contains all properties needed to configure the plugin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// creating object and setting some properties\n// --------------------------------------\nZoomOptions options = new ZoomOptions();\noptions.getPan().setEnabled(true);\noptions.getPan().setMode(InteractionAxis.XY);\noptions.getZoom().setEnabled(true);\noptions.getZoom().setMode(InteractionAxis.XY);\n")),(0,r.kt)("h2",{id:"pan-element"},"PAN element"),(0,r.kt)("p",null,"The panning refers to the horizontal or vertical scrolling of a chart wider than the display."),(0,r.kt)("p",null,"Every options has got a inner element to set ",(0,r.kt)("strong",{parentName:"p"},"Pan")," options. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"options.getPan().setEnabled(true);\noptions.getPan().setMode(InteractionAxis.XY);\n")),(0,r.kt)("p",null,"The complete options are described by following table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"if ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," the panning is enabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),(0,r.kt)("td",{parentName:"tr",align:null},"InteractionAxis.XY"),(0,r.kt)("td",{parentName:"tr",align:null},"Panning directions. Remove the appropriate direction to disable. For instance, InteractionAxis.Y would only allow panning in the y direction.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rangeMin"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Range.html"},"Range")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Format of minimum pan range depends on scale type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rangeMax"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Range.html"},"Range")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Format of maximum pan range depends on scale type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"speed"),(0,r.kt)("td",{parentName:"tr",align:null},"double"),(0,r.kt)("td",{parentName:"tr",align:null},"20"),(0,r.kt)("td",{parentName:"tr",align:null},"The threshold factor before applying pan, on category scale.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"double"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal pan distance required before actually applying pan.")))),(0,r.kt)("h3",{id:"mode-pan-callback"},"Mode Pan callback"),(0,r.kt)("p",null,"The panning directions can be configured by a ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/callbacks/ModeCallback.html"},"callback")," at runtime, as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ZoomOptions options = new ZoomOptions();\noptions.getPan().setMode(new ModeCallback() {\n            \n    @Override\n    public InteractionAxis mode(IsChart chart) {\n        return InteractionAxis.Y;\n    }\n});\n")),(0,r.kt)("h3",{id:"onprogress-pan-callback"},"onProgress Pan callback"),(0,r.kt)("p",null,"The pan element can catch events during panning which can be consumed by ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/callbacks/ProgressCallback.html"},"callback"),", as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ZoomOptions options = new ZoomOptions();\noptions.getPan().setProgressCallback(new ProgressCallback() {\n            \n    @Override\n    public void onProgress(IsChart chart, AbstractConfigurationItem item) {\n        // my logic \n    }\n});\n")),(0,r.kt)("p",null,"The callback is receiving the chart instance and ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Pan.html"},"Pan")," instance."),(0,r.kt)("h3",{id:"oncomplete-pan-callback"},"onComplete Pan callback"),(0,r.kt)("p",null,"The pan element can catch event when panning is completed which can be consumed by ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/callbacks/CompleteCallback.html"},"callback"),", as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ZoomOptions options = new ZoomOptions();\noptions.getPan().setCompleteCallback(new CompleteCallback() {\n            \n    @Override\n    public void onComplete(IsChart chart, AbstractConfigurationItem item) {\n        // my logic \n    }\n});\n")),(0,r.kt)("p",null,"The callback is receiving the chart instance and ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Pan.html"},"Pan")," instance."),(0,r.kt)("h2",{id:"zoom-element"},"ZOOM element"),(0,r.kt)("p",null,"The zooming refers to a way to maintain focus when the chart size changes."),(0,r.kt)("p",null,"Every options has got a inner element to set ",(0,r.kt)("strong",{parentName:"p"},"Zoom")," options. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"options.getZoom().setEnabled(true);\noptions.getZoom().setMode(InteractionAxis.XY);\n")),(0,r.kt)("p",null,"The complete options are described by following table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"if ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," the zooming is enabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"drag"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean - ",(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Drag.html"},"Drag")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Drag-to-zoom effect can be customized.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),(0,r.kt)("td",{parentName:"tr",align:null},"InteractionAxis.XY"),(0,r.kt)("td",{parentName:"tr",align:null},"Zooming directions. Remove the appropriate direction to disable. For instance, InteractionAxis.Y would only allow zooming in the y direction.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rangeMin"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Range.html"},"Range")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Format of minimum pan range depends on scale type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rangeMax"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Range.html"},"Range")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Format of maximum pan range depends on scale type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"speed"),(0,r.kt)("td",{parentName:"tr",align:null},"double"),(0,r.kt)("td",{parentName:"tr",align:null},"0.1"),(0,r.kt)("td",{parentName:"tr",align:null},"The speed of element via mouse wheel (percentage of element on a wheel event). Must be a value between 0 and 1.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sensitivity"),(0,r.kt)("td",{parentName:"tr",align:null},"double"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal zoom level before actually applying zoom, on category scale.")))),(0,r.kt)("h3",{id:"dragging"},"Dragging"),(0,r.kt)("p",null,"The Drag-to-zoom effect can be customized."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Drag.html"},"Drag")," object provides the methods to customized the area to zoom."),(0,r.kt)("p",null,"A drag object must be created by the ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin"),", as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// creates a drag object with global options as default\n// --------------------------------------\nDrag dragWithGlobalDef = ZoomPlugin.createDrag();\ndragWithGlobalDef.setAnimationDuration(1000);\n\n// --------------------------------------\n// creates a drag object with chart options as default\n// --------------------------------------\nDrag drag = ZoomPlugin.createDrag(chart);\ndrag.setAnimationDuration(1000);\n")),(0,r.kt)("p",null,"The complete options are described by following table:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backgroundColor"),(0,r.kt)("td",{parentName:"tr",align:null},"String - ",(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rgba(225,225,225,0.3)")),(0,r.kt)("td",{parentName:"tr",align:null},"The fill color of drag area.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderColor"),(0,r.kt)("td",{parentName:"tr",align:null},"String - ",(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rgb(225,225,225)")),(0,r.kt)("td",{parentName:"tr",align:null},"The stroke color of drag area.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"borderWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"The stroke width of drag area.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"animationDuration"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of milliseconds an animation takes.")))),(0,r.kt)("h3",{id:"mode-zoom-callback"},"Mode Zoom callback"),(0,r.kt)("p",null,"The zooming directions can be configured by a ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/callbacks/ModeCallback.html"},"callback")," at runtime, as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ZoomOptions options = new ZoomOptions();\noptions.getZoom().setMode(new ModeCallback() {\n            \n    @Override\n    public InteractionAxis mode(IsChart chart) {\n        return InteractionAxis.Y;\n    }\n});\n")),(0,r.kt)("h3",{id:"onprogress-zoom-callback"},"onProgress Zoom callback"),(0,r.kt)("p",null,"The zoom element can catch events during zooming which can be consumed by ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/callbacks/ProgressCallback.html"},"callback"),", as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ZoomOptions options = new ZoomOptions();\noptions.getZoom().setProgressCallback(new ProgressCallback() {\n            \n    @Override\n    public void onProgress(IsChart chart, AbstractConfigurationItem item) {\n        // my logic \n    }\n});\n")),(0,r.kt)("p",null,"The callback is receiving the chart instance and ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Zoom.html"},"Zoom")," instance."),(0,r.kt)("h3",{id:"oncomplete-zoom-callback"},"onComplete Zoom callback"),(0,r.kt)("p",null,"The zoom element can catch event when zooming is completed which can be consumed by ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/callbacks/CompleteCallback.html"},"callback"),", as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"ZoomOptions options = new ZoomOptions();\noptions.getZoom().setCompleteCallback(new CompleteCallback() {\n            \n    @Override\n    public void onComplete(IsChart chart, AbstractConfigurationItem item) {\n        // my logic \n    }\n});\n")),(0,r.kt)("p",null,"The callback is receiving the chart instance and ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Zoom.html"},"Zoom")," instance."),(0,r.kt)("h2",{id:"range"},"Range"),(0,r.kt)("p",null,"Both for pan and zoom element, you can set the minimum and maximum range of values to limit the action."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/Range.html"},"Range")," object provides the methods to set ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Y"),"."),(0,r.kt)("p",null,"The types of values depends on scale type used by chart, therefore there are the methods to set:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ZoomOptions options = new ZoomOptions();\n// --------------------------------------\n// as double for linear and logarithmic cartesian and radial linear scales\n// --------------------------------------\noptions.getZoom().getRangeMin().setX(10D);\n\n// --------------------------------------\n// as String for category cartesian scale\n// --------------------------------------\noptions.getZoom().getRangeMin().setX("Myvalue");\n\n// --------------------------------------\n// as Date for time cartesian scale\n// --------------------------------------\noptions.getZoom().getRangeMin().setX(new Date());\n')),(0,r.kt)("h2",{id:"resetting-zooming"},"Resetting zooming"),(0,r.kt)("p",null,"You can programmatically reset the zoom to the default state by ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin"),", as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// resets zoom on chart instance\n// --------------------------------------\nZoomPlugin.resetZoom(chart);\n")))}h.isMDXComponent=!0}}]);