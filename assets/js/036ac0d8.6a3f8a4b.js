(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{213:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return g}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,g=p["".concat(c,".").concat(d)]||p[d]||h[d]||i;return n?r.a.createElement(g,o(o({ref:t},b),{},{components:n})):r.a.createElement(g,o({ref:t},b))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var b=2;b<i;b++)c[b]=n[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(8),i=(n(0),n(213)),c={id:"Interaction",title:"Interaction",hide_title:!0,sidebar_label:"Interaction"},o={unversionedId:"configuration/Interaction",id:"configuration/Interaction",isDocsHomePage:!1,title:"Interaction",description:"Interaction",source:"@site/docs/configuration/Interaction.md",sourceDirName:"configuration",slug:"/configuration/Interaction",permalink:"/Charba-Wiki/docs/configuration/Interaction",version:"current",sidebar_label:"Interaction",frontMatter:{id:"Interaction",title:"Interaction",hide_title:!0,sidebar_label:"Interaction"},sidebar:"docs",previous:{title:"Common configuration",permalink:"/Charba-Wiki/docs/configuration/Commons"},next:{title:"Animation",permalink:"/Charba-Wiki/docs/configuration/Animation"}},l=[{value:"Interaction",id:"interaction",children:[]},{value:"Hover",id:"hover",children:[]},{value:"Events",id:"events",children:[{value:"Clicking",id:"clicking",children:[]},{value:"Hovering",id:"hovering",children:[]},{value:"Resizing",id:"resizing",children:[]},{value:"Selecting a dataset",id:"selecting-a-dataset",children:[]},{value:"Clicking on the title",id:"clicking-on-the-title",children:[]},{value:"Clicking on an axis",id:"clicking-on-an-axis",children:[]}]}],b={toc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"interaction"},"Interaction"),Object(i.b)("p",null,"The interaction configuration defines how a user can interact with the chart via hover or tooltips."),Object(i.b)("p",null,"To get, change and apply own properties, you can invoke the ",Object(i.b)("strong",{parentName:"p"},"set")," and ",Object(i.b)("strong",{parentName:"p"},"get")," methods, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// sets and gets interaction mode\nchart.getOptions().getInteraction().setMode(InteractionMode.NEAREST);\n\nInteractionMode mode = chart.getOptions().getInteraction().getMode();\n")),Object(i.b)("p",null,"The defaults values are set in global defaults options, see ",Object(i.b)("a",{parentName:"p",href:"../defaults/DefaultsCharts#interaction"},"default global interaction options"),"."),Object(i.b)("p",null,"Table with options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"),Object(i.b)("th",{parentName:"tr",align:"left"},"Default"),Object(i.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"axis"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),Object(i.b)("td",{parentName:"tr",align:"left"},"InteractionAxis.X"),Object(i.b)("td",{parentName:"tr",align:"left"},"Define which directions are used in calculating distances.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"intersect"),Object(i.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"true")),Object(i.b)("td",{parentName:"tr",align:"left"},"if ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", the hover mode only applies when the mouse position intersects an item on the chart.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"mode"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionMode.html"},"InteractionMode")),Object(i.b)("td",{parentName:"tr",align:"left"},"InteractionMode.NERAEST"),Object(i.b)("td",{parentName:"tr",align:"left"},"Sets which elements appear in the tooltip.")))),Object(i.b)("h2",{id:"hover"},"Hover"),Object(i.b)("p",null,"The hover configuration, to configure interaction with the chart via hover, is passed to a chart by:"),Object(i.b)("p",null,"To get, change and apply own properties, you can invoke the ",Object(i.b)("strong",{parentName:"p"},"set")," and ",Object(i.b)("strong",{parentName:"p"},"get")," methods, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// sets and gets interaction mode\nchart.getOptions().getHover().setMode(InteractionMode.NEAREST);\n\nInteractionMode mode = chart.getOptions().getHover().getMode();\n")),Object(i.b)("p",null,"The defaults values are set in global defaults options, see ",Object(i.b)("a",{parentName:"p",href:"../defaults/DefaultsCharts#hover"},"default global hover options"),"."),Object(i.b)("p",null,"Table with options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"),Object(i.b)("th",{parentName:"tr",align:"left"},"Default"),Object(i.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"axis"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),Object(i.b)("td",{parentName:"tr",align:"left"},"InteractionAxis.X"),Object(i.b)("td",{parentName:"tr",align:"left"},"Define which directions are used in calculating distances.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"intersect"),Object(i.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("inlineCode",{parentName:"td"},"true")),Object(i.b)("td",{parentName:"tr",align:"left"},"if ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", the hover mode only applies when the mouse position intersects an item on the chart.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"mode"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionMode.html"},"InteractionMode")),Object(i.b)("td",{parentName:"tr",align:"left"},"InteractionMode.NERAEST"),Object(i.b)("td",{parentName:"tr",align:"left"},"Sets which elements appear in the tooltip.")))),Object(i.b)("h2",{id:"events"},"Events"),Object(i.b)("p",null,"You can set which events must be caught and how to manage them by event handlers. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// sets and gets the catchable events\nchart.getOptions().setEvents(Event.CLICK, Event.MOUSEMOVE);\n\nList<Event> events = chart.getOptions().getEvents();\n")),Object(i.b)("p",null,"The default value is set in global defaults options, see ",Object(i.b)("a",{parentName:"p",href:"../defaults/DefaultsCharts"},"default global chart options"),"."),Object(i.b)("p",null,"Table with options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Name"),Object(i.b)("th",{parentName:"tr",align:"left"},"Type"),Object(i.b)("th",{parentName:"tr",align:"left"},"Default"),Object(i.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"events"),Object(i.b)("td",{parentName:"tr",align:"left"},Object(i.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/Event.html"},"Event"),"[]"),Object(i.b)("td",{parentName:"tr",align:"left"},"Event.MOUSEMOVE, Event.MOUSEOUT, Event.CLICK, Event.TOUCHSTART, Event.TOUCHMOVE"),Object(i.b)("td",{parentName:"tr",align:"left"},"The events option defines the browser events that the chart should listen to.")))),Object(i.b)("h3",{id:"clicking"},"Clicking"),Object(i.b)("p",null,"The click event is thrown if the browser event type is ",Object(i.b)("inlineCode",{parentName:"p"},"mouseup")," or ",Object(i.b)("inlineCode",{parentName:"p"},"click"),". To catch the event and manage it, you can add a ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/ChartClickEventHandler.html"},"ChartClickEventHandler")," instance to the chart options, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// adds click event handler\nchart.addHandler(new ChartClickEventHandler(){\n\n   /**\n    * Invoked when the user clicks on the chart.\n    * \n    * @param event chart click event\n    */\n   @Override \n   public void onClick(ChartClickEvent event){\n      // logic\n   }\n         \n}, ChartClickEvent.TYPE);\n")),Object(i.b)("h3",{id:"hovering"},"Hovering"),Object(i.b)("p",null,"The hover event is thrown when any of the events fire on the chart. To catch the event and manage it, you can add a ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/ChartHoverEvent.html"},"ChartHoverEvent")," instance to the chart options, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// adds hover event handler\nchart.addHandler(new ChartHoverEventHandler(){\n\n   /**\n    * Invoked when the user hovers on the chart.\n    * \n    * @param event chart hover event\n    */\n   @Override \n   public void onHover(ChartHoverEvent event){\n      // logic\n   }\n      \n}, ChartHoverEvent.TYPE);\n")),Object(i.b)("h3",{id:"resizing"},"Resizing"),Object(i.b)("p",null,"The resize event is thrown when the chart has been resized. To catch the event and manage it, you can add a ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/ChartClickEventHandler.html"},"ChartResizeEventHandler")," instance to the chart options, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// adds resize event handler\nchart.addHandler(new ChartResizeEventHandler(){\n\n   /**\n    * Invoked when the chart has been resized.\n    * \n    * @param event chart resize event\n    */\n   @Override \n   public void onResize(ChartResizeEvent event){\n      // logic\n   }\n   \n}, ChartResizeEvent.TYPE);\n")),Object(i.b)("h3",{id:"selecting-a-dataset"},"Selecting a dataset"),Object(i.b)("p",null,"When a ",Object(i.b)("a",{parentName:"p",href:"#clicking"},"click")," event is fired hovering a dataset element, you can add a ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/DatasetSelectionEventHandler.html"},"DatasetSelectionEventHandler")," instance to the chart options and considering it how a dataset selection, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// adds dataset selection event handler\nchart.addHandler(new DatasetSelectionEventHandler(){\n    \n    /**\n     * Invoked when the user clicks on the chart to select a dataset.\n     * \n     * @param event chart dataset selection event\n     */         \n    @Override\n    public void onSelect(DatasetSelectionEvent event){\n        // logic\n    }\n}, DatasetSelectionEvent.TYPE);\n")),Object(i.b)("p",null,"The dataset selection ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/DatasetSelectionEvent.html"},"event")," contains the selected dataset ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/items/DatasetReference.html"},"reference")," with all info about the selected dataset and item."),Object(i.b)("h3",{id:"clicking-on-the-title"},"Clicking on the title"),Object(i.b)("p",null,"The click event is throw if the event type is ",Object(i.b)("inlineCode",{parentName:"p"},"mouseup")," or ",Object(i.b)("inlineCode",{parentName:"p"},"click"),". When the event is fired hovering the title element, you can add a ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/TitleClickEventHandler.html"},"TitleClickEventHandler")," instance to the chart options, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// adds title click event handler\nchart.addHandler(new TitleClickEventHandler(){\n    \n    /**\n     * Invoked when the user clicks on the chart title.\n     * \n     * @param event title click event\n     */\n    @Override\n    public onClick(TitleClickEvent event){\n        // logic\n    }\n}, TitleClickEvent.TYPE);\n")),Object(i.b)("h3",{id:"clicking-on-an-axis"},"Clicking on an axis"),Object(i.b)("p",null,"The click event is throw if the event type is ",Object(i.b)("inlineCode",{parentName:"p"},"mouseup")," or ",Object(i.b)("inlineCode",{parentName:"p"},"click"),". When the event is fired hovering an axis element, you can add a ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/AxisClickEventHandler.html"},"AxisClickEventHandler")," instance to the chart options, as following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// adds axis click event handler\nchart.addHandler(new AxisClickEventHandler(){\n    \n    /**\n     * Invoked when the user clicks on the chart axis.\n     * \n     * @param event axis click event\n     */\n    @Override\n    public onClick(AxisClickEvent event){\n        // logic\n    }\n}, AxisClickEvent.TYPE);\n")),Object(i.b)("p",null,"The axis click ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/events/AxisClickEvent.html"},"event")," contains the selected scale ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/items/ScaleItem.html"},"item")," with all info about the selected scale."),Object(i.b)("p",null,"Due to charts can be created with specific axes, the axis click event can provide the ",Object(i.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/configuration/Axis.html"},"axes")," configurations if there are, enabling you to get the instance used to configure the chart."))}s.isMDXComponent=!0}}]);