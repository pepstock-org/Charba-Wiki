(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{209:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return d}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=b(a),m=n,d=u["".concat(c,".").concat(m)]||u[m]||p[m]||r;return a?i.a.createElement(d,l(l({ref:t},s),{},{components:a})):i.a.createElement(d,l({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,c=new Array(r);c[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var s=2;s<r;s++)c[s]=a[s];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},210:function(e,t,a){"use strict";a.d(t,"b",(function(){return r})),a.d(t,"a",(function(){return c}));var n=a(16),i=a(211);function r(){var e=Object(n.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var r=void 0===n?{}:n,c=r.forcePrependBaseUrl,l=void 0!==c&&c,o=r.absolute,s=void 0!==o&&o;if(!a)return a;if(a.startsWith("#"))return a;if(Object(i.b)(a))return a;if(l)return t+a;var b=a.startsWith(t)?a:t+a.replace(/^\//,"");return s?e+b:b}(r,a,e,t)}}}function c(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},211:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return i}))},70:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return u}));var n=a(3),i=a(8),r=(a(0),a(209)),c=a(210),l={id:"CartesianLogarithmicAxes",title:"Cartesian logarithmic",hide_title:!0,sidebar_label:"Cartesian logarithmic"},o={unversionedId:"CartesianLogarithmicAxes",id:"version-3.3/CartesianLogarithmicAxes",isDocsHomePage:!1,title:"Cartesian logarithmic",description:"Cartesian Logarithmic Axes",source:"@site/versioned_docs/version-3.3/CartesianLogarithmicAxes.md",sourceDirName:".",slug:"/CartesianLogarithmicAxes",permalink:"/Charba-Wiki/docs/3.3/CartesianLogarithmicAxes",version:"3.3",sidebar_label:"Cartesian logarithmic",frontMatter:{id:"CartesianLogarithmicAxes",title:"Cartesian logarithmic",hide_title:!0,sidebar_label:"Cartesian logarithmic"},sidebar:"version-3.3/docs",previous:{title:"Cartesian category",permalink:"/Charba-Wiki/docs/3.3/CartesianCategoryAxes"},next:{title:"Cartesian time",permalink:"/Charba-Wiki/docs/3.3/CartesianTimeAxes"}},s=[{value:"Cartesian Logarithmic Axes",id:"cartesian-logarithmic-axes",children:[]},{value:"Ticks",id:"ticks",children:[{value:"Callback",id:"callback",children:[]},{value:"BuildTicks callback",id:"buildticks-callback",children:[]}]}],b={toc:s};function u(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"cartesian-logarithmic-axes"},"Cartesian Logarithmic Axes"),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/3.3/org/pepstock/charba/client/configuration/CartesianLogarithmicAxis.html"},"logarithmic axis")," is use to chart numerical data. It can be placed on either the x or y axis. As the name suggests, logarithmic interpolation is used to determine where a value lies on the axis."),Object(r.b)("img",{src:Object(c.a)("/img/logScale.png")}),Object(r.b)("h2",{id:"ticks"},"Ticks"),Object(r.b)("p",null,"The logarithmic axis provides the following options for configuring ",Object(r.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/3.3/org/pepstock/charba/client/configuration/CartesianLogarithmicTick.html"},"tick marks"),". These options extend the ",Object(r.b)("a",{parentName:"p",href:"CartesianAxes#tick-configuration"},"common tick configuration"),"."),Object(r.b)("p",null,"Table with options:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Default"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"min"),Object(r.b)("td",{parentName:"tr",align:null},"double"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"Double.MIN_VALUE")),Object(r.b)("td",{parentName:"tr",align:null},"User defined minimum number for the scale, overrides minimum value from data.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"max"),Object(r.b)("td",{parentName:"tr",align:null},"double"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"Double.MAX_VALUE")),Object(r.b)("td",{parentName:"tr",align:null},"User defined maximum number for the scale, overrides maximum value from data.")))),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"min")," and ",Object(r.b)("inlineCode",{parentName:"p"},"max")," settings set explicit ends to the axes. When these are set, some data points may not be visible."),Object(r.b)("p",null,"The further customization of ticks, a callback is provided."),Object(r.b)("h3",{id:"callback"},"Callback"),Object(r.b)("p",null,"It is also common to want to change the tick marks to include information about the data type. For example, adding a dollar sign ('$'). To do this, you need to implement a ticks callback in the axis configuration."),Object(r.b)("p",null,"To apply a custom callback, you can set a ",Object(r.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/3.3/org/pepstock/charba/client/callbacks/TickCallback.html"},"TickCallback")," instance to the axis options, as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},'axis.getTicks().setCallback(new TickCallback() {\n\n   /**\n    * Changes the tick marks to include information about the data type.\n    * \n    * @param axis axis instance where this callback as been defined\n    * @param value value of tick\n    * @param index index of tick\n    * @param values list of all tick values\n    * @return the tick to apply or if the callback returns null the associated grid line will be hidden.\n    */\n   public String onCallback(Axis axis, double value, int index, List<Double> values){\n      // add $\n      return "$" + value;\n   }\n         \n});\n')),Object(r.b)("h3",{id:"buildticks-callback"},"BuildTicks callback"),Object(r.b)("p",null,"This callback can be used to change parameters in the scale during ticks building. To implement this callback, you must implement ",Object(r.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/3.3/org/pepstock/charba/client/callbacks/AxisBuildTicksCallback.html"},"this interface"),". "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"public interface AxisBuildTicksCallback {\n\n   /**\n    * Callback that runs before ticks are created.\n    * \n    * @param axis axis instance where this callback as been defined\n    * @param item axis item instance\n    */\n   void onBeforeBuildTicks(Axis axis, AxisItem item);\n\n   /**\n     * Callback that runs after ticks are created. Useful for filtering ticks.\n     * \n     * @param axis axis instance where this callback as been defined\n     * @param item axis item instance\n     * @param ticks list of created ticks\n     */\n    void onAfterBuildTicks(Axis axis, AxisItem item, List<Double> ticks);\n\n}\n")))}u.isMDXComponent=!0}}]);