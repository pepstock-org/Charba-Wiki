(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{209:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var o=r(0),a=r.n(o);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(r),d=o,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||n;return r?a.a.createElement(m,i(i({ref:t},s),{},{components:r})):a.a.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,l=new Array(n);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<n;s++)l[s]=r[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},210:function(e,t,r){"use strict";r.d(t,"b",(function(){return n})),r.d(t,"a",(function(){return l}));var o=r(16),a=r(211);function n(){var e=Object(o.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,r=void 0===t?"/":t,n=e.url;return{withBaseUrl:function(e,t){return function(e,t,r,o){var n=void 0===o?{}:o,l=n.forcePrependBaseUrl,i=void 0!==l&&l,c=n.absolute,s=void 0!==c&&c;if(!r)return r;if(r.startsWith("#"))return r;if(Object(a.b)(r))return r;if(i)return t+r;var b=r.startsWith(t)?r:t+r.replace(/^\//,"");return s?e+b:b}(n,r,e,t)}}}function l(e,t){return void 0===t&&(t={}),(0,n().withBaseUrl)(e,t)}},211:function(e,t,r){"use strict";function o(e){return!0===/^(\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!o(e)}r.d(t,"b",(function(){return o})),r.d(t,"a",(function(){return a}))},97:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return p}));var o=r(3),a=r(8),n=(r(0),r(209)),l=r(210),i={id:"Colors",title:"Colors",hide_title:!0,sidebar_label:"Colors and filling"},c={unversionedId:"coloring/Colors",id:"coloring/Colors",isDocsHomePage:!1,title:"Colors",description:"Coloring",source:"@site/docs/coloring/Colors.md",sourceDirName:"coloring",slug:"/coloring/Colors",permalink:"/Charba-Wiki/docs/coloring/Colors",version:"current",sidebar_label:"Colors and filling",frontMatter:{id:"Colors",title:"Colors",hide_title:!0,sidebar_label:"Colors and filling"},sidebar:"docs",previous:{title:"Zoom plugin",permalink:"/Charba-Wiki/docs/extensions/Zoom"},next:{title:"Patterns",permalink:"/Charba-Wiki/docs/coloring/Patterns"}},s=[{value:"Coloring",id:"coloring",children:[{value:"Building colors",id:"building-colors",children:[]}]},{value:"Filling",id:"filling",children:[{value:"Modes",id:"modes",children:[]}]}],b={toc:s};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(n.b)("wrapper",Object(o.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"coloring"},"Coloring"),Object(n.b)("p",null,"The colors on charts is very important because can make the difference to have an understandable result or not."),Object(n.b)("p",null,"Usually the colors are managed as string, following the syntax defined for CSS, but sometimes this is annoying because its' easier to have the name of the color."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Charba")," provides:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")," interface to manage colors"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",{parentName:"li",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/Color.html"},"Color")," entity to create and manage colors"),Object(n.b)("li",{parentName:"ul"},"3 enumerations with",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"all ",Object(n.b)("a",{parentName:"li",href:"./tables/HTMLColorsNames"},"color names")," defined for HTML, by enumeration ",Object(n.b)("a",{parentName:"li",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/HtmlColor.html"},"HtmlColor")),Object(n.b)("li",{parentName:"ul"},"all ",Object(n.b)("a",{parentName:"li",href:"./tables/GWTMaterialColors"},"color names")," defined for GWT Material, by enumeration ",Object(n.b)("a",{parentName:"li",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/GwtMaterialColor.html"},"GwtMaterialColor")),Object(n.b)("li",{parentName:"ul"},"first ",Object(n.b)("a",{parentName:"li",href:"./tables/GoogleChartColors"},"31 color names")," defined for Google Charts, by enumeration ",Object(n.b)("a",{parentName:"li",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/GoogleChartColor.html"},"GoogleChartColor")," "),Object(n.b)("li",{parentName:"ul"},"all gradients defined by ",Object(n.b)("a",{parentName:"li",href:"https://uigradients.com"},"UiGradients.com"),", by enumeration ",Object(n.b)("a",{parentName:"li",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/UiGradient.html"},"UiGradient"))))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Charba")," is using ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")," and colors as string in the methods where you must define a color."),Object(n.b)("h3",{id:"building-colors"},"Building colors"),Object(n.b)("p",null,"Even if the usual method is to use strings which are representing colors, leveraging on colors structure of ",Object(n.b)("strong",{parentName:"p"},"Charba"),", you can use color as objects, defining your base colors and play with transparency without creating a specific string every time."),Object(n.b)("p",null,"The ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")," interface (and then all colors defined out of the box) has got a method which returns a another color instance, based from source one, as following:"),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},"// it can be a static reference\nColor myColor = new Color(255,0,0);\n// new color based on previous one, which is immutable.\nIsColor myColorWithAlpha = myColor.alpha(0.2D);\n// new Color darker from the previous one\nIsColor myDarkerColor = myColor.darker();\n")),Object(n.b)("p",null,"Another interesting utility is the ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/ColorBuilder.html"},"ColorBuilder")," which can create ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")," instances by a string."),Object(n.b)("pre",null,Object(n.b)("code",{parentName:"pre",className:"language-java"},'// parses color and creates new color.\n// by HEX representation\nIsColor myColorHex = ColorBuilder.parse("#FF0000");\n// by RGB representation\nIsColor myColorRGB = ColorBuilder.parse("rgb(255, 0, 0)");\n// by RGBA representation\nIsColor myColorRGBA = ColorBuilder.parse("rgba(255, 0, 0, 0.5)");\n// by HSL representation\nIsColor myColorHSL = ColorBuilder.parse("hsl(100, 100%, 50%)");\n// by HSLA representation\nIsColor myColorHSLA = ColorBuilder.parse("hsla(100, 100%, 50%, 0.5)");\n// by color names representation\nIsColor myColorName = ColorBuilder.parse("red");\n')),Object(n.b)("p",null,"The parser of ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/ColorBuilder.html"},"ColorBuilder")," is able to parse color string representation by HEX, RGB, RGBA, HSL and HSLA."),Object(n.b)("p",null,"The parser can also use HTML color names, defined in the ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/colors/HtmlColor.html"},"HtmlColor")," enumeration. "),Object(n.b)("h2",{id:"filling"},"Filling"),Object(n.b)("p",null,"Both ",Object(n.b)("a",{parentName:"p",href:"../charts/ChartLine"},"line")," and ",Object(n.b)("a",{parentName:"p",href:"../charts/ChartRadar"},"radar")," charts support a ",Object(n.b)("inlineCode",{parentName:"p"},"fill")," option on the dataset object which can be used to create area between two datasets or a dataset and a boundary."),Object(n.b)("h3",{id:"modes"},"Modes"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Charba")," is providing an enumeration for fixed ",Object(n.b)("a",{parentName:"p",href:"https://www.pepstock.org/Charba/4.0/org/pepstock/charba/client/enums/Fill.html"},"filling modes"),". "),Object(n.b)("p",null,"On top of these, you can set other kind of filling mode, as following:"),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",{parentName:"tr",align:"left"},"Mode"),Object(n.b)("th",{parentName:"tr",align:"left"},"Type"),Object(n.b)("th",{parentName:"tr",align:"left"},"Values"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"left"},"Absolute dataset index"),Object(n.b)("td",{parentName:"tr",align:"left"},"int"),Object(n.b)("td",{parentName:"tr",align:"left"},Object(n.b)("inlineCode",{parentName:"td"},"1"),", ",Object(n.b)("inlineCode",{parentName:"td"},"2"),", ",Object(n.b)("inlineCode",{parentName:"td"},"3"),", ...")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",{parentName:"tr",align:"left"},"Relative dataset index"),Object(n.b)("td",{parentName:"tr",align:"left"},"String"),Object(n.b)("td",{parentName:"tr",align:"left"},Object(n.b)("inlineCode",{parentName:"td"},'"-1"'),", ",Object(n.b)("inlineCode",{parentName:"td"},'"-2"'),", ",Object(n.b)("inlineCode",{parentName:"td"},'"+1"'),", ...")))),Object(n.b)("img",{src:Object(l.a)("/img/fillingMode.png")}),Object(n.b)("p",null,"To get absolute dataset index, you can get it by ",Object(n.b)("inlineCode",{parentName:"p"},"Fill.getFill(int)")," and you get a IsFill mode that you can set to ",Object(n.b)("strong",{parentName:"p"},"Charba")," configuration."),Object(n.b)("p",null,"To get relative dataset index, you can get it by ",Object(n.b)("inlineCode",{parentName:"p"},"Fill.getFill(String)")," and you get a IsFill mode that you can set to ",Object(n.b)("strong",{parentName:"p"},"Charba")," configuration."),Object(n.b)("p",null,"Furthermore ",Object(n.b)("strong",{parentName:"p"},"Charba")," configuration enables the possibility to set directly absolute or relative filling mode, by ",Object(n.b)("inlineCode",{parentName:"p"},"setFill(int)")," or ",Object(n.b)("inlineCode",{parentName:"p"},"setFill(String)")," methods."))}p.isMDXComponent=!0}}]);