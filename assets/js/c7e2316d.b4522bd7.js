"use strict";(self.webpackChunkcharba=self.webpackChunkcharba||[]).push([[41569],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),g=r,d=h["".concat(s,".").concat(g)]||h[g]||u[g]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},91663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={id:"Plugins",title:"Plugins",hide_title:!0,sidebar_label:"Plugins"},o=void 0,l={unversionedId:"Plugins",id:"version-3.3/Plugins",title:"Plugins",description:"Plugins",source:"@site/versioned_docs/version-3.3/Plugins.md",sourceDirName:".",slug:"/Plugins",permalink:"/Charba-Wiki/docs/3.3/Plugins",draft:!1,tags:[],version:"3.3",frontMatter:{id:"Plugins",title:"Plugins",hide_title:!0,sidebar_label:"Plugins"},sidebar:"version-3.3/docs",previous:{title:"Radial axes",permalink:"/Charba-Wiki/docs/3.3/RadialAxes"},next:{title:"Controllers",permalink:"/Charba-Wiki/docs/3.3/Controllers"}},s={},p=[{value:"Plugins",id:"plugins",level:2},{value:"Plugin ID",id:"plugin-id",level:2},{value:"Options",id:"options",level:2},{value:"Importing existing Chart.JS plugins",id:"importing-existing-chartjs-plugins",level:2},{value:"Special plugin options case",id:"special-plugin-options-case",level:4}],c={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"plugins"},"Plugins"),(0,r.kt)("p",null,"Plugins are the most efficient way to customize or change the default behavior of a chart. Leveraging on ",(0,r.kt)("a",{parentName:"p",href:"http://www.chartjs.org/"},"Chart.JS")," implementation, ",(0,r.kt)("strong",{parentName:"p"},"Charba")," provides the features to set a plugin both at global and at chart level (inline plugin)."),(0,r.kt)("p",null,"A plugin must implement the ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/Plugin.html"},"Plugin")," interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public interface Plugin {\n\n   /**\n    * Plugins must define a unique id in order to be configurable.\n    * Returns the plugin id. A plugin id \n    *\n    * can not start with a dot or an underscore\n    * can not contain any non-URL-safe characters\n    * cannot contain upper-case letters\n    * should be something short, but also reasonably descriptive\n    * \n    * @return the plugin id.\n    */\n   String getId();\n\n   /**\n    * Called before initializing configuration of 'chart'.\n    * \n    * @param chart The chart instance.\n    */\n   void onConfigure(IsChart chart);\n\n   /**\n    * Called before initializing 'chart'.\n    * \n    * @param chart The chart instance.\n    */\n   void onBeforeInit(IsChart chart);\n\n    /**\n     * Called after 'chart' has been initialized and before the first update.\n     * \n     * @param chart the chart instance.\n     * @param nativeChart CHART.JS chart instance\n     */\n    void onAfterInit(IsChart chart, Chart nativeChart);\n\n   /**\n    * Called before updating 'chart'. If any plugin returns false, the update is cancelled (and thus subsequent\n    * render(s)) until another 'update' is triggered.\n    * \n    * @param chart The chart instance.\n    * @return false to cancel the chart update.\n    */\n   boolean onBeforeUpdate(IsChart chart);\n\n   /**\n    * Called after 'chart' has been updated and before rendering. Note that this hook will not be called if the chart update\n    * has been previously cancelled.\n    * \n    * @param chart The chart instance.\n    */\n   void onAfterUpdate(IsChart chart);\n\n   /**\n    * Called before laying out 'chart'. If any plugin returns false, the layout update is cancelled until another\n    * 'update' is triggered.\n    * \n    * @param chart The chart instance.\n    * @return false to cancel the chart layout.\n    */\n   boolean onBeforeLayout(IsChart chart);\n\n   /**\n    * Called after the 'chart' has been layed out. Note that this hook will not be called if the layout update has been\n    * previously cancelled.\n    * \n    * @param chart The chart instance.\n    */\n   void onAfterLayout(IsChart chart);\n\n   /**\n    * Called before updating the 'chart' datasets. If any plugin returns false, the datasets update is cancelled\n    * until another 'update' is triggered.\n    * \n    * @param chart The chart instance.\n    * @return false to cancel the datasets update.\n    */\n   boolean onBeforeDatasetsUpdate(IsChart chart);\n\n   /**\n    * Called after the 'chart' datasets have been updated. Note that this hook will not be called if the datasets update has\n    * been previously cancelled.\n    * \n    * @param chart The chart instance.\n    */\n   void onAfterDatasetsUpdate(IsChart chart);\n\n   /**\n    * Called before updating the 'chart' dataset at the given 'args.index'. If any plugin returns false, the\n    * datasets update is cancelled until another 'update' is triggered.\n    * \n    * @param chart The chart instance.\n    * @param item the dataset item.\n    * @return false to cancel the chart datasets drawing.\n    */\n   boolean onBeforeDatasetUpdate(IsChart chart, DatasetPluginItem item);\n\n   /**\n    * Called after the 'chart' datasets at the given 'args.index' has been updated. Note that this hook will not be called if\n    * the datasets update has been previously cancelled.\n    * \n    * @param chart The chart instance.\n    * @param item the dataset item.\n    */\n   void onAfterDatasetUpdate(IsChart chart, DatasetPluginItem item);\n\n   /**\n    * Called before rendering 'chart'. If any plugin returns false, the rendering is cancelled until another\n    * 'render' is triggered.\n    * \n    * @param chart The chart instance.\n    * @return false to cancel the chart rendering.\n    */\n   boolean onBeforeRender(IsChart chart);\n\n   /**\n    * Called after the 'chart' has been fully rendered (and animation completed). Note that this hook will not be called if the\n    * rendering has been previously cancelled.\n    * \n    * @param chart The chart instance.\n    */\n   void onAfterRender(IsChart chart);\n\n   /**\n    * Called before drawing 'chart' at every animation frame specified by the given easing value. If any plugin returns\n    * false, the frame drawing is cancelled until another 'render' is triggered.\n    * \n    * @param chart The chart instance.\n    * @param easing The current animation value, between 0.0 and 1.0.\n    * @return false to cancel the chart drawing.\n    */\n   boolean onBeforeDraw(IsChart chart, double easing);\n\n   /**\n    * Called after the 'chart' has been drawn for the specific easing value. Note that this hook will not be called if the\n    * drawing has been previously cancelled.\n    * \n    * @param chart The chart instance.\n    * @param easing The current animation value, between 0.0 and 1.0.\n    */\n   void onAfterDraw(IsChart chart, double easing);\n\n   /**\n    * Called before drawing the 'chart' datasets. If any plugin returns false, the datasets drawing is cancelled\n    * until another 'render' is triggered.\n    * \n    * @param chart The chart instance.\n    * @param easing The current animation value, between 0.0 and 1.0.\n    * @return false to cancel the chart datasets drawing.\n    */\n   boolean onBeforeDatasetsDraw(IsChart chart, double easing);\n\n   /**\n    * Called after the 'chart' datasets have been drawn. Note that this hook will not be called if the datasets drawing has\n    * been previously cancelled.\n    * \n    * @param chart The chart instance.\n    * @param easing The current animation value, between 0.0 and 1.0.\n    */\n   void onAfterDatasetsDraw(IsChart chart, double easing);\n\n   /**\n    * Called before drawing the 'chart' dataset at the given 'args.index' (datasets are drawn in the reverse order). If any\n    * plugin returns false, the datasets drawing is cancelled until another 'render' is triggered.\n    * \n    * @param chart The chart instance.\n    * @param item the dataset item.\n    * @return false to cancel the chart datasets drawing.\n    */\n   boolean onBeforeDatasetDraw(IsChart chart, DatasetPluginItem item);\n\n   /**\n    * Called after the 'chart' datasets at the given 'args.index' have been drawn (datasets are drawn in the reverse order).\n    * Note that this hook will not be called if the datasets drawing has been previously cancelled.\n    * \n    * @param chart The chart instance.\n    * @param item the dataset item.\n    */\n   void onAfterDatasetDraw(IsChart chart, DatasetPluginItem item);\n\n   /**\n    * Called before drawing the 'tooltip'. If any plugin returns false, the tooltip drawing is cancelled until\n    * another 'render' is triggered.\n    * \n    * @param chart The chart instance.\n    * @param item The tooltip instance.\n    * @return false to cancel the chart tooltip drawing.\n    */\n   boolean onBeforeTooltipDraw(IsChart chart, TooltipPluginItem item);\n\n   /**\n    * Called after drawing the 'tooltip'. Note that this hook will not be called if the tooltip drawing has been previously\n    * cancelled.\n    * \n    * @param chart The chart instance.\n    * @param item The tooltip instance.\n    */\n   void onAfterTooltipDraw(IsChart chart, TooltipPluginItem item);\n\n   /**\n    * Called before processing the specified 'event'. If any plugin returns false, the event will be discarded.\n    * \n    * @param chart The chart instance.\n    * @param event The event object.\n    * @return false to discard the event.\n    */\n   boolean onBeforeEvent(IsChart chart, BaseNativeEvent event);\n\n   /**\n    * Called after the 'event' has been consumed. Note that this hook will not be called if the 'event' has been previously\n    * discarded.\n    * \n    * @param chart The chart instance.\n    * @param event The event object.\n    */\n   void onAfterEvent(IsChart chart, BaseNativeEvent event);\n\n   /**\n    * Called after the chart as been resized.\n    * \n    * @param chart The chart instance.\n    * @param size The new canvas display size (eq. canvas.style width and height).\n    */\n   void onResize(IsChart chart, SizeItem size);\n\n   /**\n    * Called after the chart as been destroyed.\n    * \n    * @param chart The chart instance.\n    */\n   void onDestroy(IsChart chart);\n}\n")),(0,r.kt)("p",null,"The easy way to implement a plugin is to extends the ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/plugins/AbstractPlugin.html"},"AbstractPlugin")," class and implement ",(0,r.kt)("inlineCode",{parentName:"p"},"getId")," method and then extends only the methods you want to implement."),(0,r.kt)("p",null,"A plugin can be registered/unregistered at global level as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// REGISTER\nDefaults.get().getPlugins().register(new ChartBackgroundColor());\n\n// UNREGISTER\nDefaults.get().getPlugins().unregister("pluginid");\n')),(0,r.kt)("p",null,"At chart level, this is an example how to register it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'AbstractPlugin p = new AbstractPlugin() {\n         \n   @Override\n   public String getId() {\n      return "test";\n   }\n   \n   @Override\n   public void onAfterDatasetsDraw(IsChart chart, double easing) {\n      // logic\n   }\n};\n\nchart.getPlugins().add(p);\n')),(0,r.kt)("p",null,"You can also enable or disable them at chart level, as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'if (!chart.getOptions().getPlugins().isEnabled("pluginid")){\n   chart.getOptions().getPlugins().setEnabled("pluginid", true);\n}\n')),(0,r.kt)("h2",{id:"plugin-id"},"Plugin ID"),(0,r.kt)("p",null,"Plugins must define a unique id in order to be configurable."),(0,r.kt)("p",null,"This id should follow the name convention (otherwise an ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html"},"illegal argument")," exception will be thrown):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"can not start with a dot or an underscore"),(0,r.kt)("li",{parentName:"ul"},"can not contain any non-URL-safe characters"),(0,r.kt)("li",{parentName:"ul"},"can not contain upper case letters")),(0,r.kt)("p",null,"If a plugin is intended to be released publicly, you may want to check and to see if there's something by that name already.\nTo do that, see the following samples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// ONLY GLOBAL\nSet<String> ids = Defaults.get().getPlugins().getIds();\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"A plugin could need to be configured. Apart the public methods that every plugin can expose to set specific values and to be aligned with ",(0,r.kt)("a",{parentName:"p",href:"http://www.chartjs.org/"},"Chart.JS")," way to pass configuration to plugins, the chart options can host the configuration of the plugin which could be read at runtime."),(0,r.kt)("p",null,"A plugin can consume configuration by options from:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Global options"),(0,r.kt)("li",{parentName:"ul"},"Global chart options"),(0,r.kt)("li",{parentName:"ul"},"Chart options"),(0,r.kt)("li",{parentName:"ul"},"Chart dataset ")),(0,r.kt)("p",null,"Here is same example how to set options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// GLOBAL options\n// --------------------------------------\n// store the plugin options by plugin ID\n// --------------------------------------\nDefaults.get().getGlobal().getPlugin().setOptions("pluginID", options);\n// --------------------------------------\n// or store the plugin options without plugin ID\n// --------------------------------------\nDefaults.get().getGlobal().getPlugin().setOptions(options);\n\n// GLOBAL CHART options\n// --------------------------------------\n// store the plugin options by plugin ID\n// --------------------------------------\nDefaults.get().getOptions(ChartType.BAR).getPlugin().setOptions("pluginID", options);\n// --------------------------------------\n// or store the plugin options without plugin ID\n// --------------------------------------\nDefaults.get().getOptions(ChartType.BAR).getPlugin().setOptions(options);\n\n// CHART instance \n// --------------------------------------\n// store the plugin options by plugin ID\n// --------------------------------------\nchart.getOptions().getPlugin().setOptions("pluginID", options);\n// --------------------------------------\n// or store the plugin options without plugin ID\n// --------------------------------------\nchart.getOptions().getPlugin().setOptions(options);\n\n// Dataset \n// --------------------------------------\n// store the plugin options by plugin ID\n// --------------------------------------\ndataset.setOptions("pluginID", options);\n// --------------------------------------\n// or store the plugin options without plugin ID\n// --------------------------------------\ndataset.setOptions(options);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," to store must extend ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/plugins/AbstractPluginOptions.html"},"AbstractPluginOptions")," and leverage on available methods to store the plugin configuration."),(0,r.kt)("p",null,"To read the stored configuration, here are some example: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// GLOBAL options\nif (Defaults.get().getGlobal().getPlugin().hasOptions("pluginID")){\n   // --------------------------------------\n   // retrieve the plugin options by plugin ID\n   // --------------------------------------\n   Defaults.get().getGlobal().getPlugin().getOptions("pluginID", factory);\n   // --------------------------------------\n   // or retrieve the plugin options without plugin ID\n   // --------------------------------------\n   Defaults.get().getGlobal().getPlugin().getOptions(factory);\n}\n\n// GLOBAL CHART options\nif (Defaults.get().getOptions(ChartType.BAR).getPlugin().hasOptions("pluginID")){\n   // --------------------------------------\n   // retrieve the plugin options by plugin ID\n   // --------------------------------------\n   Defaults.get().getOptions(ChartType.BAR).getPlugin().getOptions("pluginID", factory);\n   // --------------------------------------\n   // or retrieve the plugin options without plugin ID\n   // --------------------------------------\n   Defaults.get().getOptions(ChartType.BAR).getPlugin().getOptions(factory);\n}\n\n// CHART \nif (chart.getOptions().getPlugin().hasOptions("pluginID")){\n   // --------------------------------------\n   // retrieve the plugin options by plugin ID\n   // --------------------------------------\n   chart.getOptions().getPlugin().getOptions("pluginID", factory);\n   // --------------------------------------\n   // or retrieve the plugin options without plugin ID\n   // --------------------------------------\n   chart.getOptions().getPlugin().getOptions(factory);\n}\n\n// Dataset \nif (dataset.hasOptions("pluginID")){\n   // --------------------------------------\n   // retrieve the plugin options by plugin ID\n   // --------------------------------------\n   dataset.getOptions("pluginID", factory);\n   // --------------------------------------\n   // or retrieve the plugin options without plugin ID\n   // --------------------------------------\n   dataset.getOptions(factory);\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"factory")," is an implementation of ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/plugins/AbstractPluginOptionsFactory.html"},"AbstractPluginOptionsFactory"),") interface necessary to enable ",(0,r.kt)("strong",{parentName:"p"},"Charba")," to create your options, passing the javascript object which maintain the configuration."),(0,r.kt)("p",null,"Here is how to create the instance and pass to chart options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ChartBackgroundColorOptions option = new ChartBackgroundColorOptions();\noption.setBackgroundColor("green");\n\n// --------------------------------------\n// store the plugin options by plugin ID\n// --------------------------------------\nchart.getOptions().getPlugins().setOptions(ChartBackgroundColor.ID, option);\n// --------------------------------------\n// or store the plugin options without plugin ID\n// --------------------------------------\nchart.getOptions().getPlugin().setOptions(options);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/plugins/AbstractPluginOptions.html"},"AbstractPluginOptions")," provides some ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," in order to store the options into the different targets, as followoing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ChartBackgroundColorOptions option = new ChartBackgroundColorOptions();\noption.setBackgroundColor("green");\n\n// --------------------------------------\n// store to the GLOBAL options\n// --------------------------------------\noptions.store();\n// --------------------------------------\n// store to the GLOBAL chart options\n// --------------------------------------\noptions.store(ChartType.BAR);\n// --------------------------------------\n// store to the chart options\n// --------------------------------------\noptions.store(chart);\n// --------------------------------------\n// store to the dataset\n// --------------------------------------\noptions.store(dataset);\n')),(0,r.kt)("h2",{id:"importing-existing-chartjs-plugins"},"Importing existing Chart.JS plugins"),(0,r.kt)("p",null,"Some plugins, written in javascript, are already developed and available for ",(0,r.kt)("a",{parentName:"p",href:"http://www.chartjs.org/"},"Chart.JS"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Charba")," provides you the way to import and leverage on these plugins."),(0,r.kt)("p",null,"The following list of steps is related to GWT projects. For J2CL applications, you must implement an ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/resources/AbstractInjectableResource.html"},"AbstractInjectableResource")," in order to provide the javascript content as strings."),(0,r.kt)("p",null,"These are the steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"take the javascript plugin and store in your project into a resource folder "),(0,r.kt)("li",{parentName:"ol"},"create a GWT ",(0,r.kt)("a",{parentName:"li",href:"http://www.gwtproject.org/doc/latest/DevGuideClientBundle.html"},"ClientBundle")," to get the javascript plugin as GWT ",(0,r.kt)("a",{parentName:"li",href:"http://www.gwtproject.org/doc/latest/DevGuideClientBundle.html#TextResource"},"TextResource")),(0,r.kt)("li",{parentName:"ol"},"use ",(0,r.kt)("strong",{parentName:"li"},"Charba")," ",(0,r.kt)("a",{parentName:"li",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/Injector.html"},"Injector")," to inject the plugin. It's ",(0,r.kt)("strong",{parentName:"li"},"IMPORTANT")," to inject ",(0,r.kt)("a",{parentName:"li",href:"http://www.chartjs.org/"},"Chart.JS")," before the plugin because usually the plugin registers itself and therefore ",(0,r.kt)("a",{parentName:"li",href:"http://www.chartjs.org/"},"Chart.JS")," must be available"),(0,r.kt)("li",{parentName:"ol"},"Create a javascript object, with some properties to configure the plugin (see ",(0,r.kt)("a",{parentName:"li",href:"#options"},"above"),")"),(0,r.kt)("li",{parentName:"ol"},"Create the view with a chart with the statement to activate the plugin")),(0,r.kt)("p",null,"Here is an example, how to include ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/y-takey/chartjs-plugin-stacked100"},"Stacked100")," plugin:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get ",(0,r.kt)("inlineCode",{parentName:"li"},"stacked100")," plugin from ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/y-takey/chartjs-plugin-stacked100/blob/master/src/index.js"},"GitHub")," and store the javascript into your project, in this example we are using the ",(0,r.kt)("strong",{parentName:"li"},"Charba")," showcase paths:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"/src/org/pepstock/charba/showcase/client/resources/js/chartjs-plugin-stacked100.js"))),(0,r.kt)("li",{parentName:"ul"},"Create a client bundle (called in this example ",(0,r.kt)("inlineCode",{parentName:"li"},"org.pepstock.charba.showcase.client.resources.MyResources.java"),") with the plugin reference:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.pepstock.charba.showcase.client.resources;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.resources.client.ClientBundle;\nimport com.google.gwt.resources.client.TextResource;\n\npublic interface MyResources extends ClientBundle {\n    \n    public static final MyResources INSTANCE = GWT.create(MyResources.class);\n\n    @Source("js/chartjs-plugin-stacked100.js")\n    TextResource chartJsStacked100Source();\n\n}    \n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inject the javascript resource into you main page or before using the plugin:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// create an injectable resource by text resource of plugin\nInjectableTextResource plugin = new InjectableTextResource(MyResources.INSTANCE.chartJsStacked100Source());\n// inject plugin\nInjector.ensureInjected(MyResources.INSTANCE.chartJsStacked100Source());\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a plugin options object to store plugin configuration (in this case an inner class):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'private static class Stacked100Options extends AbstractPluginOptions {\n\n    private Key enableKey = Key.create("enable");\n\n    Stacked100Options() {\n        super("stacked100");\n    }\n\n    void setEnable(boolean enable) {\n        setValue(enableKey, enable);\n    }\n} \n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add a plugin options object to your chart instance:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Stacked100Options options = new Stacked100Options();\noptions.setEnable(true);\noptions.store(chart);\n")),(0,r.kt)("p",null,"And now your chart instance is leveraging on ",(0,r.kt)("inlineCode",{parentName:"p"},"stacked100")," plugin."),(0,r.kt)("admonition",{title:"PAY ATTENTION",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Usually all ",(0,r.kt)("a",{parentName:"p",href:"http://www.chartjs.org/"},"Chart.JS")," are registering themselves automatically, at global level. If the plugin does not register itself, you must register on the chart instances and the above procedure will be more complex.")),(0,r.kt)("h4",{id:"special-plugin-options-case"},"Special plugin options case"),(0,r.kt)("p",null,"Unfortunately some ",(0,r.kt)("a",{parentName:"p",href:"https://www.chartjs.org/docs/2.9.4/developers/plugins.html#plugin-options"},"Chart.JS")," plugin implementation are not respecting the described standard way to store the plugin options."),(0,r.kt)("p",null,"Therefore ",(0,r.kt)("strong",{parentName:"p"},"Charba")," provides into the configurable options a method to add an additional configuration."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," method has been created on configuration options (all elements) to add a javascript object in another one. This enables to add the plugin configuration in any other configuration object of ",(0,r.kt)("strong",{parentName:"p"},"Charba"),"."))}h.isMDXComponent=!0}}]);