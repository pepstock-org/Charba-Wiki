(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{199:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(8),r=(n(0),n(213)),i=n(214),l={id:"Zoom",title:"Zoom plugin",hide_title:!0,sidebar_label:"Zoom"},b={unversionedId:"extensions/Zoom",id:"extensions/Zoom",isDocsHomePage:!1,title:"Zoom plugin",description:"Zoom plugin",source:"@site/docs/extensions/Zoom.md",sourceDirName:"extensions",slug:"/extensions/Zoom",permalink:"/Charba-Wiki/docs/extensions/Zoom",version:"current",sidebar_label:"Zoom",frontMatter:{id:"Zoom",title:"Zoom plugin",hide_title:!0,sidebar_label:"Zoom"},sidebar:"docs",previous:{title:"Labels plugin",permalink:"/Charba-Wiki/docs/extensions/Labels"},next:{title:"Colors",permalink:"/Charba-Wiki/docs/coloring/Colors"}},c=[{value:"Zoom plugin",id:"zoom-plugin",children:[]},{value:"Activation",id:"activation",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Pan",id:"pan",children:[]},{value:"Zoom",id:"zoom",children:[{value:"Wheel",id:"wheel",children:[]},{value:"Drag",id:"drag",children:[]},{value:"Pinch",id:"pinch",children:[]}]},{value:"Limits",id:"limits",children:[{value:"Scale limit",id:"scale-limit",children:[]}]},{value:"Scriptable",id:"scriptable",children:[{value:"Starting event",id:"starting-event",children:[]},{value:"Progressing event",id:"progressing-event",children:[]},{value:"Completed event",id:"completed-event",children:[]},{value:"Rejected event",id:"rejected-event",children:[]}]},{value:"API",id:"api",children:[{value:"Resetting",id:"resetting",children:[]},{value:"Zooming",id:"zooming",children:[]},{value:"Zooming on scale",id:"zooming-on-scale",children:[]},{value:"Panning",id:"panning",children:[]}]}],p={toc:c};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"zoom-plugin"},"Zoom plugin"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Charba")," provides out of the box the feature to enable ",Object(r.b)("a",{parentName:"p",href:"https://github.com/chartjs/chartjs-plugin-zoom"},"Zoom")," which is a light weight plugin to zoom and pan a chart."),Object(r.b)("p",null,"The plugin is providing 2 main actions to apply on a chart:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"panning"),", which refers to the horizontal or vertical scrolling of a chart wider than the display, can be done via the mouse or with a finger"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"zooming"),", which maintains focus when the chart size changes, is done via the mouse wheel or via a pinch gesture")),Object(r.b)("p",null,Object(r.b)("a",{parentName:"p",href:"https://github.com/hammerjs/hammer.js"},"Hammer.JS")," javaScript library is used for gesture recognition."),Object(r.b)("img",{src:Object(i.a)("/img/zoom.gif")}),Object(r.b)("h2",{id:"activation"},"Activation"),Object(r.b)("p",null,"The zoom plugin is injected directly in the document."),Object(r.b)("p",null,"The plugin ID is a constant everywhere available, ",Object(r.b)("inlineCode",{parentName:"p"},"ZoomPlugin.ID"),", in ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin")," entry point."),Object(r.b)("p",null,"This plugin registers itself globally, meaning that once injected, all charts will enable zooming. In case you want it enabled only for a few charts, you can enable it as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// enabling the plugin without any parameter\n// the plugin is NOT registered to all charts\n// --------------------------------------\nZoomPlugin.enable();\n\n// --------------------------------------\n// enabling the plugin with `true` parameter\n// the plugin is registered to all charts\n// --------------------------------------\nZoomPlugin.enable(true);\n\n// --------------------------------------\n// enabling the plugin with `true` parameter\n// the plugin is registered to all charts and\n// another `true` parameter to inject the HammerJS\n// --------------------------------------\nZoomPlugin.enable(true, true);\n")),Object(r.b)("p",null,"With last sample, you can decide if you want to inject ",Object(r.b)("a",{parentName:"p",href:"https://github.com/hammerjs/hammer.js"},"Hammer.JS")," (default), passing ",Object(r.b)("inlineCode",{parentName:"p"},"false"),". This could be helpful when you have another library which is using and injecting Hammer.JS."),Object(r.b)("p",null,"To activate the plugin in a specific chart, it's enough to provide the configuration options (see ",Object(r.b)("a",{parentName:"p",href:"#configuration"},"below"),") or enabling it by:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// --------------------------------------\n// ENABLING the plugin to a chart instance \n// storing a plugin options \n// --------------------------------------\n// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables the zoom wheeling\noptions.getZoom().getWheel().setEnabled(true);\n// stores the plugin options directly by the options\noptions.store(chart);\n\n// --------------------------------------\n// ENABLING the plugin to a chart instance \n// by a boolean using default plugin \n// options\n// --------------------------------------\nchart.getOptions().getPlugins().setEnabled(ZoomPlugin.ID, true);\n")),Object(r.b)("h2",{id:"configuration"},"Configuration"),Object(r.b)("p",null,"The plugin options can be changed at 2 different levels and are evaluated with the following priority:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"per chart by ",Object(r.b)("inlineCode",{parentName:"li"},"chart.getOptions().getPlugins().setOptions")," method"),Object(r.b)("li",{parentName:"ul"},"per chart type by ",Object(r.b)("inlineCode",{parentName:"li"},"Defaults.get().getOptions([chartType]).getPlugins().setOptions")," method"),Object(r.b)("li",{parentName:"ul"},"or globally by ",Object(r.b)("inlineCode",{parentName:"li"},"Defaults.get().getGlobal().getPlugins().setOptions")," method")),Object(r.b)("p",null,"The configuration class ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomOptions.html"},"ZoomOptions")," contains all properties needed to configure the plugin."),Object(r.b)("p",null,"You can also change the default for all charts instances, as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables pan\noptions.getPan().setEnabled(true);\noptions.getPan().setMode(InteractionAxis.XY);\n// enables zoom wheel \noptions.getZoom().getWheel().setEnabled(true);\noptions.getZoom().setMode(InteractionAxis.XY);\n\n// --------------------------------------\n// STORING plugin options\n// --------------------------------------\n// stores the plugin options by plugin ID\nDefaults.get().getGlobal().getPlugin().setOptions(ZoomPlugin.ID, options);\n// stores the plugin options without plugin ID\nDefaults.get().getGlobal().getPlugin().setOptions(options);\n// stores the plugin options directly by the options\noptions.store();\n")),Object(r.b)("p",null,"If you need to read the plugin options, there is the specific factory, ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomOptionsFactory.html"},"ZoomOptionsFactory")," as static reference inside the ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin")," entry point which can be used to retrieve the options from chart as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// gets options reference\nZoomOptions options;\n\n// --------------------------------------\n// GETTING plugin options from chart\n// --------------------------------------\nif (chart.getOptions().getPlugin().hasOptions(ZoomPlugin.ID)){\n   // retrieves the plugin options by plugin ID\n   options = chart.getOptions().getPlugin().getOptions(ZoomPlugin.ID, ZoomPlugin.FACTORY);\n   //retrieves the plugin options without plugin ID\n   options = chart.getOptions().getPlugin().getOptions(ZoomPlugin.FACTORY);\n}\n")),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Scriptable"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"events"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/Event.html"},"Event"),"[]"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"Defaults.get().getGlobal()"),Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},".getEvents()")),Object(r.b)("td",{parentName:"tr",align:"left"},"The events option defines the browser events that the plugin should listen to. This overrides the options at chart level.")))),Object(r.b)("h2",{id:"pan"},"Pan"),Object(r.b)("p",null,"The panning refers to the horizontal or vertical scrolling of a chart wider than the display."),Object(r.b)("p",null,"Every options has got a inner element to set ",Object(r.b)("strong",{parentName:"p"},"Pan")," options. "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables pan\noptions.getPan().setEnabled(true);\n// sets mode\noptions.getPan().setMode(InteractionAxis.XY);\n")),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"enabled"),Object(r.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"false")),Object(r.b)("td",{parentName:"tr",align:"left"},"If ",Object(r.b)("inlineCode",{parentName:"td"},"true")," the panning is enabled.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"modifierKey"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/enums/ModifierKey.html"},"ModifierKey")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"null")),Object(r.b)("td",{parentName:"tr",align:"left"},"Keyboard modifier key which must be pressed to enable panning, otherwise the rejected callback will be triggered.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"mode"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),Object(r.b)("td",{parentName:"tr",align:"left"},"InteractionAxis.XY"),Object(r.b)("td",{parentName:"tr",align:"left"},"Panning directions. Remove the appropriate direction to disable. For instance, InteractionAxis.Y would only allow panning in the y direction.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"overScaleMode"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),Object(r.b)("td",{parentName:"tr",align:"left"},"InteractionAxis.XY"),Object(r.b)("td",{parentName:"tr",align:"left"},"Direction which of the enabled panning directions should only be available when the mouse cursor is over one of scale.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"threshold"),Object(r.b)("td",{parentName:"tr",align:"left"},"double"),Object(r.b)("td",{parentName:"tr",align:"left"},"10"),Object(r.b)("td",{parentName:"tr",align:"left"},"The minimal pan distance required before actually applying pan.")))),Object(r.b)("h2",{id:"zoom"},"Zoom"),Object(r.b)("p",null,"The zooming refers to a way to maintain focus when the chart size changes."),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/Zoom.html"},"zoom options")," has got a inner elements in order to configure:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#wheel"},"Wheel")," element to set the mouse wheel behavior"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#drag"},"Drag")," element to set the drag-to-zoom behavior"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#pinch"},"Pinch")," element to set  the pinch behavior")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables wheel\noptions.getZoom().getWheel().setEnabled(true);\n// enables drag\noptions.getZoom().getDrag().setEnabled(true);\n// enables pinch\noptions.getZoom().getPinch().setEnabled(true);\n")),Object(r.b)("p",null,"The complete common options to all inner elements are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"mode"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),Object(r.b)("td",{parentName:"tr",align:"left"},"InteractionAxis.XY"),Object(r.b)("td",{parentName:"tr",align:"left"},"Zooming directions. Remove the appropriate direction to disable. For instance, InteractionAxis.Y would only allow zooming in the y direction.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"overScaleMode"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis")),Object(r.b)("td",{parentName:"tr",align:"left"},"InteractionAxis.XY"),Object(r.b)("td",{parentName:"tr",align:"left"},"Direction which of the enabled zooming directions should only be available when the mouse cursor is over one of scale.")))),Object(r.b)("h3",{id:"wheel"},"Wheel"),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/Wheel.html"},"wheel")," options refers to a way to set the mouse wheel behavior."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables wheel\noptions.getZoom().getWheel().setEnabled(true);\n// sets speed\noptions.getZoom().getWheel().setSpped(0.5);\n")),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"enabled"),Object(r.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"false")),Object(r.b)("td",{parentName:"tr",align:"left"},"If ",Object(r.b)("inlineCode",{parentName:"td"},"true")," the wheel zooming is enabled.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"speed"),Object(r.b)("td",{parentName:"tr",align:"left"},"double"),Object(r.b)("td",{parentName:"tr",align:"left"},"0.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"The speed of element via mouse wheel (percentage of element on a wheel event). Must be a value between 0 and 1.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"threshold"),Object(r.b)("td",{parentName:"tr",align:"left"},"double"),Object(r.b)("td",{parentName:"tr",align:"left"},"0"),Object(r.b)("td",{parentName:"tr",align:"left"},"The minimal zoom distance required before actually applying zoom.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"modifierKey"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/enums/ModifierKey.html"},"ModifierKey")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"null")),Object(r.b)("td",{parentName:"tr",align:"left"},"Keyboard modifier key which must be pressed to enable zooming, otherwise the rejected callback will be triggered.")))),Object(r.b)("h3",{id:"drag"},"Drag"),Object(r.b)("p",null,"The Drag-to-zoom effect can be customized."),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/Drag.html"},"drag")," object provides the methods to customized the area to zoom."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables drag\noptions.getZoom().getDrag().setEnabled(true);\n// sets drag background color\noptions.getZoom().getDrag().setBackgroundColor(HtmlColor.RED);\n")),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"enabled"),Object(r.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"false")),Object(r.b)("td",{parentName:"tr",align:"left"},"If ",Object(r.b)("inlineCode",{parentName:"td"},"true")," the drag zooming is enabled.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"backgroundColor"),Object(r.b)("td",{parentName:"tr",align:"left"},"String - ",Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")),Object(r.b)("td",{parentName:"tr",align:"left"},"rgba(225,225,225,0.3) - ",Object(r.b)("span",{style:{backgroundColor:"rgba(225,225,225,0.3))",border:"1px solid"}},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0")),Object(r.b)("td",{parentName:"tr",align:"left"},"The fill color of drag area.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"borderColor"),Object(r.b)("td",{parentName:"tr",align:"left"},"String - ",Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/colors/IsColor.html"},"IsColor")),Object(r.b)("td",{parentName:"tr",align:"left"},"rgb(225,225,225) - ",Object(r.b)("span",{style:{backgroundColor:"rgb(225,225,225))",border:"1px solid"}},"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0","\xa0")),Object(r.b)("td",{parentName:"tr",align:"left"},"The stroke color of drag area.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"borderWidth"),Object(r.b)("td",{parentName:"tr",align:"left"},"int"),Object(r.b)("td",{parentName:"tr",align:"left"},"0"),Object(r.b)("td",{parentName:"tr",align:"left"},"The stroke width of drag area.")))),Object(r.b)("h3",{id:"pinch"},"Pinch"),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/Pinch.html"},"pinch")," options refers to a way to enable the behavior of a finger gesture used with a touch screen interface that supports multi-touch."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// enables pinch\noptions.getZoom().getPinch().setEnabled(true);\n")),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"enabled"),Object(r.b)("td",{parentName:"tr",align:"left"},"boolean"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("inlineCode",{parentName:"td"},"false")),Object(r.b)("td",{parentName:"tr",align:"left"},"If ",Object(r.b)("inlineCode",{parentName:"td"},"true")," the wheel zooming is enabled.")))),Object(r.b)("h2",{id:"limits"},"Limits"),Object(r.b)("p",null,"Both for pan and zoom element, you can set the minimum and maximum range of values to limit the action."),Object(r.b)("p",null,"Every options has got a inner element to set ",Object(r.b)("strong",{parentName:"p"},"Limits")," options. "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// sets mininum value for X scale\noptions.getLimits().getX().setMin(-200);\n// sets maximum value for X scale\noptions.getLimits().getX().setMax(200);\n")),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"#scale-limit"},"x")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ScaleLimit.html"},"ScaleLimit")),Object(r.b)("td",{parentName:"tr",align:"left"},"Sets the minimum and maximum value for X scale.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"#scale-limit"},"y")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ScaleLimit.html"},"ScaleLimit")),Object(r.b)("td",{parentName:"tr",align:"left"},"Sets the minimum and maximum value for Y scale.")))),Object(r.b)("h3",{id:"scale-limit"},"Scale limit"),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ScaleLimit.html"},"scale limit")," object can set he minimum and maximum values to apply to scales in order to manage pan and zoom inside those boundaries."),Object(r.b)("p",null,"The complete options are described by following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Default"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"min"),Object(r.b)("td",{parentName:"tr",align:"left"},"double"),Object(r.b)("td",{parentName:"tr",align:"left"},"Undefined.DOUBLE"),Object(r.b)("td",{parentName:"tr",align:"left"},"Minimun allowed value for scale minimum")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"max"),Object(r.b)("td",{parentName:"tr",align:"left"},"double"),Object(r.b)("td",{parentName:"tr",align:"left"},"Undefined.DOUBLE"),Object(r.b)("td",{parentName:"tr",align:"left"},"Maximum allowed value for scale maximum")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"minRange"),Object(r.b)("td",{parentName:"tr",align:"left"},"double"),Object(r.b)("td",{parentName:"tr",align:"left"},"Undefined.DOUBLE"),Object(r.b)("td",{parentName:"tr",align:"left"},"Minimum allowed range. This defines the max zoom level.")))),Object(r.b)("h2",{id:"scriptable"},"Scriptable"),Object(r.b)("p",null,"Scriptable options in the plugin configuration accept a callback which is called during plugin configuration phase. The callbacks are getting the only 1 argument, the ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomContext.html"},"plugin context")," which contains the context of the callback execution."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// sets mode at runtime by callback\noptions.getPan().setMode(new ModeCallback(){\n\n    /**\n     * @param context context instance\n     * @return the mode (pan and zoom) directions\n     */         \n    @Override\n    public InteractionAxis invoke(ZoomContext context){\n        return InteractionAxis.Y;\n    }\n});\n")),Object(r.b)("p",null,"The context object contains the following properties:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Type"),Object(r.b)("th",{parentName:"tr",align:"left"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"attributes"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/commons/NativeObjectContainer.html"},"NativeObjectContainer")),Object(r.b)("td",{parentName:"tr",align:"left"},"User object which you can store your options at runtime.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"chart"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/IsChart.html"},"IsChart")),Object(r.b)("td",{parentName:"tr",align:"left"},"Chart instance.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"element"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/AbstractConfigurationItem.html"},"AbstractConfigurationItem")),Object(r.b)("td",{parentName:"tr",align:"left"},"The pan or zoom configuration where the options is defined as scriptable.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"point"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/EventPoint.html"},"EventPoint")),Object(r.b)("td",{parentName:"tr",align:"left"},"The point passed by the native plugin during some events handling.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"type"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/items/ContextType.html"},"ContextType")),Object(r.b)("td",{parentName:"tr",align:"left"},"The type of the context. It can be ONLY ",Object(r.b)("inlineCode",{parentName:"td"},"ContextType.ZOOM"),".")))),Object(r.b)("p",null,"The following options can be set by a callback:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},"Name"),Object(r.b)("th",{parentName:"tr",align:"left"},"Callback"),Object(r.b)("th",{parentName:"tr",align:"left"},"Returned types"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"mode"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/callbacks/ModeCallback.html"},"ModeCallback")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},"overScaleMode"),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/callbacks/ModeCallback.html"},"ModeCallback")),Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/enums/InteractionAxis.html"},"InteractionAxis"))))),Object(r.b)("h3",{id:"starting-event"},"Starting event"),Object(r.b)("p",null,"The pan and zoom element can catch events during pan and zoom starting which can be consumed by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/callbacks/StartCallback.html"},"callback"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// sets the start event handler by the callback\noptions.getPan().setStartCallback(new StartCallback(){\n\n    /**\n     * Method called when pan or zoom is about to start.\n     * \n     * @param context plugin context instance\n     * @return if this callback returns false, panning or zooming is aborted and rejected callback is invoked.\n     */\n    @Override\n    public boolean onStart(ZoomContext context){\n        // my logic\n        return true; \n    }\n});\n")),Object(r.b)("h3",{id:"progressing-event"},"Progressing event"),Object(r.b)("p",null,"The pan and zoom element can catch events during pan and zoom which can be consumed by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/callbacks/ProgressCallback.html"},"callback"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// sets the progress event handler by the callback\noptions.getPan().setProgressCallback(new ProgressCallback(){\n\n    /**\n     * Method called while the user is pan/zoom.\n     * \n     * @param context context instance\n     */         \n    @Override\n    public void onProgress(ZoomContext context){\n        // my logic \n    }\n});\n")),Object(r.b)("h3",{id:"completed-event"},"Completed event"),Object(r.b)("p",null,"The pan and zoom element can catch event when pan and zoom are completed which can be consumed by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/callbacks/CompletedCallback.html"},"callback"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// sets the complete event handler by the callback\noptions.getPan().setCompletedCallback(new CompletedCallback(){\n            \n    /**\n     * Method called once pan/zoom is completed.\n     * \n     * @param context context instance\n     */         \n    @Override\n    public void onCompleted(ZoomContext context){\n        // my logic \n    }\n});\n")),Object(r.b)("h3",{id:"rejected-event"},"Rejected event"),Object(r.b)("p",null,"The pan and zoom element can catch event when pan and zoom are invoked but it is not enabled due to the ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/enums/ModifierKey.html"},"modifier key")," is not pressed and can be consumed by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/callbacks/RejectedCallback.html"},"callback"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a plugin options\nZoomOptions options = new ZoomOptions();\n// sets the reject event handler by the callback\noptions.getPan().setRejectedCallback(new RejectedCallback(){\n            \n    /**\n     * Method called once pan/zoom is rejected.\n     * \n     * @param context context instance\n     */         \n    @Override\n    public void onRejected(ZoomContext context){\n        // my logic \n    }\n});\n")),Object(r.b)("h2",{id:"api"},"API"),Object(r.b)("p",null,"The plugin provides a set of API in order to pan, zoom and reset programmatically, without interacting with wheel or mouse events, generated by manual actions."),Object(r.b)("h3",{id:"resetting"},"Resetting"),Object(r.b)("p",null,"You can programmatically reset the zoom and pan to the default state by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// resets zoom and pan on chart instance\nZoomPlugin.reset(chart);\n// resets zoom and pan on chart instance\n// updating chart using the default\n// transition mode.\nZoomPlugin.reset(chart, DefaultTransitionKey.DEFAULT);\n")),Object(r.b)("h3",{id:"zooming"},"Zooming"),Object(r.b)("p",null,"You can programmatically zoom on a chart instance by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// zoom on chart with 110% on both directions\nZoomPlugin.zoom(chart, 1.1);\n// zoom on chart with 90% on both directions\nZoomPlugin.zoom(chart, 0.9);\n// zoom on chart with 90% on both directions\n// updating chart using the default\n// transition mode.\nZoomPlugin.zoom(chart, 0.9, DefaultTransitionKey.DEFAULT);\n")),Object(r.b)("p",null,"You can also zoom horizontally or vertically, specifying the percentage of zoom on a specific direction, by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/Amount.html"},"Amount")," class, as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// zoom on chart with 110% on X direction\nZoomPlugin.zoom(chart, new Amount(1.1));\n// zoom on chart with 90% on Y direction\nZoomPlugin.zoom(chart, new Amount(Undefined.DOUBLE, 1.1));\n// zoom on chart with 90% on Y direction\n// updating chart using the default\n// transition mode.\nAmount amount = new Amount();\namount.setY(0.9);\nZoomPlugin.zoom(chart, amount, DefaultTransitionKey.DEFAULT);\n")),Object(r.b)("h3",{id:"zooming-on-scale"},"Zooming on scale"),Object(r.b)("p",null,"You can programmatically zoom on a scale instance of the chart by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// creates a scale range to set minimum\n// and maximum range to zoom by scale\nScaleRange range = new ScaleRange();\nrange.setMin(-100);\nrange.setMax(0);\n// zoom on chart by scale, in the range between\n// value -100 and 0\nZoomPlugin.zoomScale(chart, DefaultScaleId.X, range);\n// zoom on chart by scale, in the range between\n// value -100 and 0\n// updating chart using the default\n// transition mode.\nZoomPlugin.zoomScale(chart, DefaultScaleId.X, new ScaleRange(-100, 0), DefaultTransitionKey.DEFAULT);\n")),Object(r.b)("h3",{id:"panning"},"Panning"),Object(r.b)("p",null,"You can programmatically pan on a chart instance by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/ZoomPlugin.html"},"ZoomPlugin"),", as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// pan on chart with 100 pixels on both directions\nZoomPlugin.pan(chart, 100);\n// pan on chart with 100 pixels on both directions\n// updating chart using the default\n// transition mode.\nZoomPlugin.pan(chart, 100, DefaultTransitionKey.DEFAULT);\n")),Object(r.b)("p",null,"You can also pan horizontally or vertically, specifying the amount of pixels of pan on a specific direction, by ",Object(r.b)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/4.0/org/pepstock/charba/client/zoom/Amount.html"},"Amount")," class, as following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},"// zoom on chart with 100 pixels on X direction\nZoomPlugin.pan(chart, new Amount(100));\n// zoom on chart with -100 pixels on Y direction\nZoomPlugin.pan(chart, new Amount(Undefined.DOUBLE, -100));\n// zoom on chart with 100 pixels on X direction\n// updating chart using the default\n// transition mode.\nAmount amount = new Amount();\namount.setX(100);\nZoomPlugin.pan(chart, amount, DefaultTransitionKey.DEFAULT);\n")))}s.isMDXComponent=!0},213:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return g}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),s=p(n),h=a,g=s["".concat(i,".").concat(h)]||s[h]||m[h]||r;return n?o.a.createElement(g,l(l({ref:t},c),{},{components:n})):o.a.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},214:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i}));var a=n(16),o=n(215);function r(){var e=Object(a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var r=void 0===a?{}:a,i=r.forcePrependBaseUrl,l=void 0!==i&&i,b=r.absolute,c=void 0!==b&&b;if(!n)return n;if(n.startsWith("#"))return n;if(Object(o.b)(n))return n;if(l)return t+n;var p=n.startsWith(t)?n:t+n.replace(/^\//,"");return c?e+p:p}(r,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},215:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return o}))}}]);