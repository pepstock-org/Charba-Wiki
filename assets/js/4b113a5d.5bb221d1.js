"use strict";(self.webpackChunkcharba=self.webpackChunkcharba||[]).push([[8255],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return d}});var n=a(67294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,i=function(t,e){if(null==t)return{};var a,n,i={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},m=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,i=t.mdxType,r=t.originalType,s=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),u=p(a),d=i,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||r;return a?n.createElement(k,l(l({ref:e},m),{},{components:a})):n.createElement(k,l({ref:e},m))}));function d(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},82844:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return c},default:function(){return d}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=a(44996),o=["components"],s={id:"CartesianTimeAxes",title:"Cartesian time",hide_title:!0,sidebar_label:"Cartesian time"},p=void 0,m={unversionedId:"CartesianTimeAxes",id:"version-3.3/CartesianTimeAxes",title:"Cartesian time",description:"Cartesian Time Axes",source:"@site/versioned_docs/version-3.3/CartesianTimeAxes.md",sourceDirName:".",slug:"/CartesianTimeAxes",permalink:"/Charba-Wiki/docs/3.3/CartesianTimeAxes",tags:[],version:"3.3",frontMatter:{id:"CartesianTimeAxes",title:"Cartesian time",hide_title:!0,sidebar_label:"Cartesian time"},sidebar:"version-3.3/docs",previous:{title:"Cartesian logarithmic",permalink:"/Charba-Wiki/docs/3.3/CartesianLogarithmicAxes"},next:{title:"Date adapters",permalink:"/Charba-Wiki/docs/3.3/DateAdapters"}},c=[{value:"Cartesian Time Axes",id:"cartesian-time-axes",children:[],level:2},{value:"Datasets",id:"datasets",children:[],level:2},{value:"Options",id:"options",children:[],level:2},{value:"Time",id:"time",children:[],level:2},{value:"Adapters",id:"adapters",children:[],level:2},{value:"Ticks",id:"ticks",children:[{value:"Callback",id:"callback",children:[],level:3},{value:"BuildTicks callback",id:"buildticks-callback",children:[],level:3}],level:2}],u={toc:c};function d(t){var e=t.components,a=(0,i.Z)(t,o);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"cartesian-time-axes"},"Cartesian Time Axes"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/configuration/CartesianTimeAxis.html"},"time axis")," is used to display times and dates. When building its ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/configuration/CartesianTimeTick.html"},"ticks"),", it will automatically calculate the most comfortable unit base on the size of the scale."),(0,r.kt)("img",{src:(0,l.Z)("/img/timeScale.png")}),(0,r.kt)("h2",{id:"datasets"},"Datasets"),(0,r.kt)("p",null,"To use time series, you must use ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/data/DataPoint.html"},"DataPoint")," in order to set the date object into axis. "),(0,r.kt)("p",null,"The x-axis data points may additionally be specified via the ",(0,r.kt)("strong",{parentName:"p"},"setX")," method when using the time axis."),(0,r.kt)("p",null,"Here is the example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'BarDataset dataset = chart.newDataset();\ndataset.setLabel("dataset 1");\n\n...\n      \nDataPoint dp1 = new DataPoint();\ndp1.setY(number_value1);\ndp1.setX(new Date(time1));\n\nDataPoint dp2 = new DataPoint();\ndp2.setY(number_value1);\ndp2.setX(new Date(time2));\n\ndataset.setDataPoints(dp1, dp2);\n\n...\n\nchart.getData().setDatasets(dataset);\n')),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,"The following options are provided by the time axis. You may also set options provided by the ",(0,r.kt)("a",{parentName:"p",href:"CartesianAxes"},"common cartesian axis"),"."),(0,r.kt)("p",null,"The time axes are providing the capability to set and get the options, by the ",(0,r.kt)("strong",{parentName:"p"},"set")," and ",(0,r.kt)("strong",{parentName:"p"},"get")," methods, as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"CartesianTimeAxis axis = new CartesianTimeAxis(chart);\naxis.setDistribution(ScaleDistribution.SERIES);\n")),(0,r.kt)("p",null,"Table with options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"distribution"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/ScaleDistribution.html"},"ScaleDistribution")),(0,r.kt)("td",{parentName:"tr",align:null},"ScaleDistribution.LINEAR"),(0,r.kt)("td",{parentName:"tr",align:null},"How data is plotted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bounds"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/ScaleBounds.html"},"ScaleBounds")),(0,r.kt)("td",{parentName:"tr",align:null},"ScaleBounds.DATA"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines the scale bounds.")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"distribution")," ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/ScaleDistribution.html"},"object")," controls the data distribution along the scale:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LINEAR"),": data are spread according to their time (distances can vary)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SERIES"),": data are spread at the same distance from each other")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"bounds")," ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/ScaleBounds.html"},"property")," controls the scale boundary strategy (bypassed by min/max time options)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATA"),": make sure data are fully visible, labels outside are removed"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TICKS"),": make sure ticks are fully visible, data outside are truncated  ")),(0,r.kt)("h2",{id:"time"},"Time"),(0,r.kt)("p",null,"The time axis provides a ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/configuration/Time.html"},"Time")," object to configure how times must be managed on axis. It provides the ",(0,r.kt)("strong",{parentName:"p"},"set")," and ",(0,r.kt)("strong",{parentName:"p"},"get")," methods as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"CartesianTimeAxis axis = new CartesianTimeAxis(chart);\n\naxis.getTime().setUnit(TimeUnit.DAY);\naxis.getTime().setTooltipFormat(TimeUnit.day.getDefaultFormat());\n")),(0,r.kt)("p",null,"Table with options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isoWeekday"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"parser"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"interpreted as a custom format to be used to parse the date")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"round"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TimeUnit.html"},"TimeUnit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"If defined, dates will be rounded to the start of this unit.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tooltipFormat"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Format string to use for the tooltip.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unit"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TimeUnit.html"},"TimeUnit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"If defined, will force the unit to be a certain type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stepSize"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of units between grid lines.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minUnit"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TimeUnit.html"},"TimeUnit")),(0,r.kt)("td",{parentName:"tr",align:null},"TimeUnit.MILLISECOND"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimum display format to be used for a time unit.")))),(0,r.kt)("p",null,"The following time measurements are supported and are mapped into ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TimeUnit.html"},"TimeUnit")," enumeration, to force a certain unit:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"millisecond"),(0,r.kt)("li",{parentName:"ul"},"second"),(0,r.kt)("li",{parentName:"ul"},"minute"),(0,r.kt)("li",{parentName:"ul"},"hour"),(0,r.kt)("li",{parentName:"ul"},"day"),(0,r.kt)("li",{parentName:"ul"},"week"),(0,r.kt)("li",{parentName:"ul"},"month"),(0,r.kt)("li",{parentName:"ul"},"quarter"),(0,r.kt)("li",{parentName:"ul"},"year")),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/configuration/Time.html"},"Time")," object is also providing another object to set the display formats, based on ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TimeUnit.html"},"TimeUnit"),". "),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/configuration/DisplayFormats.html"},"DisplayFormats")," can be used as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CartesianTimeAxis axis = new CartesianTimeAxis(chart);\n\naxis.getTime().setUnit(TimeUnit.DAY);\naxis.getTime().getDisplayFormats().setDisplayFormat(TimeUnit.DAY, "MMM D h:mm a");\n')),(0,r.kt)("p",null,"This method can override the defaults. To see the defaults, see the ",(0,r.kt)("a",{parentName:"p",href:"DateAdapters"},"date adapter")," implementation because every adapter can have own syntax and defaults."),(0,r.kt)("h2",{id:"adapters"},"Adapters"),(0,r.kt)("p",null,"The adapters options are used to configure the adapter for external date library if that adapter needs or supports options."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/configuration/Adapters.html"},"adapters options")," configuration is nested into the scale configuration as following: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'CartesianTimeAxis axis = new CartesianTimeAxis(chart);\n\n// LUXON options\nLuxonOptions options = new LuxonOptions();\noptions.setLocale("us");\n\naxis.getAdapters().setDate(options);\n')),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"PAY ATTENTION")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Only ",(0,r.kt)("a",{parentName:"p",href:"DateAdapters#Luxon"},"Luxon")," date adapters can be configured with additional options."))),(0,r.kt)("p",null,"For more details, have a look how to configure a ",(0,r.kt)("a",{parentName:"p",href:"DateAdapters#Luxon"},"Luxon")," date adapters."),(0,r.kt)("h2",{id:"ticks"},"Ticks"),(0,r.kt)("p",null,"The time axis provides the following options for configuring tick marks. These options extend the ",(0,r.kt)("a",{parentName:"p",href:"CartesianAxes#tick-configuration"},"common tick configuration"),"."),(0,r.kt)("p",null,"Table with options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max"),(0,r.kt)("td",{parentName:"tr",align:null},"java.util.Date"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"If defined, this will override the data maximum")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min"),(0,r.kt)("td",{parentName:"tr",align:null},"java.util.Date"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"If defined, this will override the data minimum")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TickSource.html"},"TickSource")),(0,r.kt)("td",{parentName:"tr",align:null},"TickSource.AUTO"),(0,r.kt)("td",{parentName:"tr",align:null},"How ticks are generated on axis time")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/enums/TickSource.html"},"object")," controls the ticks generation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AUTO"),': generates "optimal" ticks based on scale size and time options.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DATA"),": generates ticks from data (including labels from data ",(0,r.kt)("inlineCode",{parentName:"li"},"{t|x|y}")," objects)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LABELS"),": generates ticks from user given ",(0,r.kt)("inlineCode",{parentName:"li"},"labels")," values of dataset ONLY")),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"CartesianTimeAxis axis = new CartesianTimeAxis(chart);\n\naxis.getTicks().setSource(TickSource.DATA);\n")),(0,r.kt)("p",null,"The further customization of ticks, a callback is provided."),(0,r.kt)("h3",{id:"callback"},"Callback"),(0,r.kt)("p",null,"It is also common to want to change the tick marks to include information about the data type. "),(0,r.kt)("p",null,"To apply a custom callback, you can set a ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/callbacks/TimeTickCallback.html"},"TimeTickCallback")," instance to the axis options, as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"axis.getTicks().setCallback(new TimeTickCallback() {\n\n   /**\n     * Changes the tick marks to include information about the data type.\n     * \n     * @param axis axis instance where this callback as been defined\n     * @param value value of tick as date\n     * @param label label of tick, passed by CHART.JS formatting the date by the selected {@link TimeUnit} and its display\n     *            format.\n     * @param index index of tick\n     * @param values list of all tick values\n     * @return the tick to apply or if the callback returns <code>null</code> the associated grid line will be hidden.\n     */\n    public String onCallback(Axis axis, Date value, String label, int index, List<TimeTickItem> values){\n        return FORMAT.format(value);\n    }\n         \n});\n")),(0,r.kt)("p",null,"The callback is providing a specific list of items (",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/items/TimeTickItem.html"},"TimeTickItem"),") which maps CHART.JS object with the values (as date) and major booleans."),(0,r.kt)("h3",{id:"buildticks-callback"},"BuildTicks callback"),(0,r.kt)("p",null,"This callback can be used to change parameters in the scale during ticks building. To implement this callback, you must implement ",(0,r.kt)("a",{parentName:"p",href:"https://pepstock-org.github.io/Charba/3.3/org/pepstock/charba/client/callbacks/TimeAxisBuildTicksCallback.html"},"this interface"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public interface TimeAxisBuildTicksCallback {\n\n   /**\n    * Callback that runs before ticks are created.\n    * \n    * @param axis axis instance where this callback as been defined\n    * @param item axis item instance\n    */\n   void onBeforeBuildTicks(Axis axis, AxisItem item);\n\n   /**\n     * Callback that runs after ticks are created. Useful for filtering ticks.\n     * \n     * @param axis axis instance where this callback as been defined\n     * @param item axis item instance\n     * @param ticks list of created ticks\n     */\n    void onAfterBuildTicks(Axis axis, AxisItem item, List<TimeTickItem> ticks);\n\n}\n")))}d.isMDXComponent=!0}}]);